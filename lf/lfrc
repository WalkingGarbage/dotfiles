set previewer ~/.config/lf/preview
set preview true
set hidden false
set drawbox true
set icons true
set ignorecase true
set shell sh
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.

########################
#         MAPS         #
########################

# Clear maps
map d
map c
map m
map e
map o

# cut, copy, paste...
map y           copy
map cc          clear
map cy          cut
map code        code
map <delete>    trash
map br          broot_jump
map md          mkdir
map mf          mkfile
map gimp        gimp
map exe         mkexe
map ow          openwith
map go          fasd_dir
map cm          chmod
map u           $view "$f"
map .           set hidden!
map <enter>     open
map sh          shell
map ov          nvim

# dragon
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm mvdragon
map dc cpdragon
map dl dlfile

# bookmarks for directories
map dh  cd
map ddl cd ~/Downloads
map dpr cd ~/Projects
map dms cd ~/Music
map dcf cd ~/.config
map dlc cd ~/.local
map ddc cd ~/Documents


cmd video_preview ${{
    CACHE=$(mktemp /tmp/thumb_cache.XXXXX)
    ffmpegthumbnailer -i "$f" -o $CACHE -s 0
    ~/.config/lf/draw_img $CACHE && rm $CACHE
}}
map + :video_preview


########################
#       COMMANDS       #
########################

cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd trash %set -f; mv $fx ~/.trash


cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

cmd mkdir %{{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile %{{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}


cmd go ${{
  echo "Directory: "
  read ans
  cd $ans
}}

cmd gimp ${{
  devour gimp "$f"
}}

cmd mkexe %{{
  chmod +x "$f"
}}

cmd paste &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        rsync -av --ignore-existing --progress $list . \
        | stdbuf -i0 -o0 -e0 tr '\r' '\n' \
        | while read line; do
            lf -remote "send $id echo $line"
        done
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd openwith %{{
  echo "Open with: "
  read ans
  $ans "$f" > /dev/null 2>&1
}}

cmd fasd_dir ${{
   res="$(fasd -dl | grep -iv cache | fzf 2>/dev/tty)"
   if [ -f "$res" ]; then
      cmd="select"
   elif [ -d "$res" ]; then
      cmd="cd"
   fi
 lf -remote "send $id $cmd \"$res\""
 }}

cmd cp %{{
  echo "Copy to:"
  read ans
  for file in "$fx"
  do
    cp $file $ans
  done

  lf -remote 'send reload'

cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd chmod %{{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd code %{{
  code -a "$f"
}}

cmd nvim ${{
  nvim "$f"
}}

cmd trash $trash-put $fx

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# dragon commands
cmd dragon %dragon-drag-and-drop -a -x $fx
cmd dragon-stay %dragon-drag-and-drop -a $fx
cmd dragon-individual %dragon-drag-and-drop $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon


##############################
#         ARCHIVES           #
##############################

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# 7zip
cmd 7z ${{
    set -f
    mkdir $1
    cp -r $fx $1
    7zip x -o $1.zip $1
    rm -rf $1
}}
